#!/usr/bin/env bash
set -eo pipefail
shopt -s extglob

SOURCE_ROOT=$(realpath "$(dirname "${BASH_SOURCE[0]}")/..")
cd "${SOURCE_ROOT}"

ROOT=${ROOT:-$SOURCE_ROOT}
TOOLS_DIR=${TOOLS_DIR:-$ROOT/tools}
PUBLIC_DIR=${PUBLIC_DIR:-$ROOT/public}
STATIC_DIR=${STATIC_DIR:-$ROOT/static}
ARTICLES_DIR=${ARTICLES_DIR:-$ROOT/articles}
COMPONENTS_DIR=${COMPONENTS_DIR:-$ROOT/templates/components}
TRANSFORMS_DIR=${TRANSFORMS_DIR:-$ROOT/transforms}

INDEX_TEMPLATE=${INDEX_TEMPLATE:-$ROOT/templates/index.html}
ARTICLE_TEMPLATE=${ARTICLE_TEMPLATE:-$ROOT/templates/article.html}

GOMPLATE_FLAGS=${GOMPLATE_FLAGS:-}
CMARK_FLAGS=${CMARK_FLAGS:-}

gomplateFlags=(
	${GOMPLATE_FLAGS}
	--template "components=$COMPONENTS_DIR"
	--plugin "md=cmark"
	--plugin "title=$TOOLS_DIR/title"
	--plugin "synopsis=$TOOLS_DIR/synopsis"
)

generateArticle() {
	usage $# generateArticle input

	local filepath="${1}"
	local filename="${1##*/}"
	local extension="${filename##*.}"

	local writtenAt updatedAt slug
	read -r writtenAt updatedAt slug < <(article-date "$filepath")

	local body
	case "$extension" in
	md)
		body=$(cmark ${CMARK_FLAGS} --nobreaks --unsafe --smart "$filepath");;
	htm|html)
		body=$(< "$filepath");;
	*)
		log "Unknown file extension: $extension"
		return 1;;
	esac

	local title=$(./tools/title "$filepath")
	local synopsis=$(./tools/synopsis "$filepath")

	local hasMore=false
	if (( ${#synopsis} < ${#body} )); then
		hasMore=true
	fi

	mkdir -p "$PUBLIC_DIR/$slug"

	jq --null-input \
		--arg slug "$slug" \
		--arg title "$title" \
		--arg synopsisHTML "$synopsis" \
		--arg synopsisText "$(htmlq -t <<< "$synopsis")" \
		--argjson synopsisHasMore "$hasMore" \
		--argjson writtenAt "$writtenAt" \
		--argjson updatedAt "$updatedAt" \
		--arg bodyHTML "$body" \
		--arg bodyText "$(htmlq -t <<< "$body")" \
		'{
			$slug,
			$title,
			$writtenAt,
			$updatedAt,
			synopsis: {
				text: $synopsisText,
				html: $synopsisHTML,
				hasMore: $synopsisHasMore
			},
			body: {
				text: $bodyText,
				html: $bodyHTML
			}
		}' > "$PUBLIC_DIR/$slug/index.json"

	gomplate "${gomplateFlags[@]}" \
		-f "$ARTICLE_TEMPLATE" \
		-o "$PUBLIC_DIR/$slug/index.html" \
		-d "article=file://$(realpath "$PUBLIC_DIR/$slug/index.json")"
}

generateIndex() {
	for f in "$@"; do
		if [[ "$f" != *".json" ]]; then
			log "generateIndex: expected json file for $f"
			return 1
		fi
	done

	cat "$@" \
		| jq -sc 'sort_by(.writtenAt) | reverse' \
		| gomplate "${gomplateFlags[@]}" \
			-f "$INDEX_TEMPLATE" \
			-o "$PUBLIC_DIR/index.html" \
			-d "articles=stdin:///articles.json"
}

transform() {
	for f in "${TRANSFORMS_DIR[@]}"/*; do
		"$f" "$1"
	done
}

main() {
	for arg in "$@"; do
		case "$arg" in
		-m|--minify)
			shift
			export MINIFY=1;;
		-h|--help)
			log "Usage: $(basename "$0") [-m|--minify]"
			return;;
		--)
			shift
			break;;
		*)
			break;;
		esac
	done

	case "$1" in
	article)
		for f in "${@:2}"; do
			generateArticle "$f"
		done
		;;
	transform)
		for f in "${@:2}"; do
			transform "$f"
		done
		;;
	index)
		generateIndex "$@"
		;;
	"")
		mkdir -p "$PUBLIC_DIR"
		if [[ -d "$PUBLIC_DIR" ]]; then
			rm -rf "$PUBLIC_DIR/"*
		fi

		articles=( "$ARTICLES_DIR"/* )
		if [[ -f "$articles" ]]; then
			parallel-moreutils "$0" article -- "${articles[@]}"
		fi

		articleJSONs=( "$PUBLIC_DIR"/!(~*)/index.json )
		if [[ -f "$articleJSONs" ]]; then
			generateIndex "${articleJSONs[@]}"
		fi

		cp -r "$STATIC_DIR" "$PUBLIC_DIR/static"

		# transform $(find "$PUBLIC_DIR" -type f)
		parallel-moreutils "$0" transform -- $(find "$PUBLIC_DIR" -type f)
		# parallel-moreutils -j10 "${BASH_SOURCE[0]}" transform -- "$(find "$PUBLIC_DIR" -type f)"
		;;
	*)
		log "Unknown item to generate: $1 (wants article|index|transform)"
		return 1;;
	esac
}

log() {
	echo "$@" >&2
}

# usage <n> <thing> <args...>
usage() {
	if (( "$1" < ($# - 3) )); then
		log "Usage: $2 $(printf "<%s> " "${@:3}")"
		return 1
	fi
}

main "$@"
